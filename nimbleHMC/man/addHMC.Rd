% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/configureHMC.R
\name{addHMC}
\alias{addHMC}
\title{add HMC sampler}
\usage{
addHMC(MCMCconf, nodes = character(), control = list(), replace = FALSE)
}
\arguments{
\item{MCMCconf}{An existing nimble MCMC configuration, as returned by `configureMCMC`.}

\item{nodes}{A character vector of stochastic node names to sample by HMC.
If nodes is `character()`, all nodes will be sampled.}

\item{control}{Optional list of control parameters to be passed as the `control`
argument to `sampler_HMC`.  See `help(sampler_HMC)`.}

\item{replace}{If `TRUE`, remove any existing samplers assigned to `nodes` in `MCMCconf`
before adding the HMC sampler.}
}
\description{
Add a Hamiltonian Monte Carlo sampler to an existing nimble MCMC configuration
}
\details{
This is a helper function to invoke `MCMCconf$addSampler` to add an HMC sampler to an MCMC configuration.

Use this function if you have created an MCMC configuration and want modify it by
adding an MCMC sampler,

Use `MCMCconf$addSampler` instead if you need more fine-grained control.  See `help(configureMCMC)` in nimble.
}
\examples{
nimbleOptions(enableDerivs = TRUE)

code <- nimbleCode({
    b0 ~ dnorm(0, 0.001)
    b1 ~ dnorm(0, 0.001)
    sigma ~ dunif(0, 10000)
    for(i in 1:N) {
        mu[i] <- b0 + b1 * x[i]
        y[i] ~ dnorm(mu[i], sd = sigma)
    }
})

N <- 10
constants <- list(N = N, x = 1:N)
data <- list(y = 1:N)
inits <- list(b0 = 1, b1 = 0.1, sigma = 1)

Rmodel <- nimbleModel(code, constants, data, inits, buildDerivs = TRUE)

conf <- configureMCMC(Rmodel, nodes = NULL)

addHMC(conf) # modify conf by adding HMC sampler

Rmcmc <- buildMCMC(conf)
# Cmodel <- compileNimble(Rmodel)
# Cmcmc <- compileNimble(Rmcmc, project = Rmodel)
# samples <- runMCMC(Cmcmc)
}
